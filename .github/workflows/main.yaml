name: "Build"

on:
  pull_request:
    branches:
      - dev
      - main
      - test
  push:
    branches:
      - dev
      - main
      - test

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest

    steps:
      # 1. Checkout Repository (fetch full history so tags are available)
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Set Up Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: "oracle"
          java-version: "17"

      # 3. Set Up Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.2"
          channel: "stable"

      # 4. Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 5. (Optional) Setup Keystore for Android
      # Uncomment these steps if you require signing for Android builds
      # - name: Decode Keystore
      #   run: |
      #     echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
      # - name: Create key.properties
      #   run: |
      #     echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
      #     echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
      #     echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
      #     echo "storeFile=keystore.jks" >> android/key.properties

      # 6. Build APK
      - name: Build APK
        run: flutter build apk --release

      # 7. Build App Bundle (AAB)
      - name: Build App Bundle
        run: flutter build appbundle

      # 8. Build IPA (iOS â€“ no codesign)
      - name: Build IPA
        run: flutter build ipa --no-codesign

      # 9. Compress iOS build artifacts
      - name: Compress Archives and IPAs
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

      # 10. Upload Artifacts (using v3 to avoid deprecation issues)
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz

      # 11. Extract version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version:' pubspec.yaml | awk '{print $2}' | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # 12. Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 13. Modify Tag if it Already Exists
      - name: Modify Tag if it Exists
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 14. Create Release using the computed tag version
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
